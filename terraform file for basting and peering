### **Using Terraform  basting**
#### **Terraform Configuration**


### **Using Terraform**
#### **Terraform Configuration**
"vpc peering"
provider "aws" {
  region = "us-east-1"
}

resource "aws_vpc" "requester_vpc" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_vpc" "accepter_vpc" {
  cidr_block = "192.168.0.0/16"
}

resource "aws_vpc_peering_connection" "vpc_peering" {
  vpc_id        = aws_vpc.requester_vpc.id
  peer_vpc_id   = aws_vpc.accepter_vpc.id
  auto_accept   = false
}

resource "aws_vpc_peering_connection_accepter" "accepter" {
  vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id
  auto_accept               = true
}

resource "aws_route" "requester_to_accepter" {
  route_table_id            = aws_vpc.requester_vpc.main_route_table_id
  destination_cidr_block    = aws_vpc.accepter_vpc.cidr_block
  vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id
}

resource "aws_route" "accepter_to_requester" {
  route_table_id            = aws_vpc.accepter_vpc.main_route_table_id
  destination_cidr_block    = aws_vpc.requester_vpc.cidr_block
  vpc_peering_connection_id = aws_vpc_peering_connection.vpc_peering.id
}
```
Run:
```bash
terraform init
terraform apply
```

---





"bashing"
resource "aws_instance" "bastion_host" {
  ami           = "ami-0c02fb55956c7d316"
  instance_type = "t2.micro"
  key_name      = "my-key-pair"
  subnet_id     = aws_subnet.public_subnet.id

  associate_public_ip_address = true

  security_groups = [aws_security_group.bastion_sg.name]
}

resource "aws_instance" "private_instance" {
  ami           = "ami-0c02fb55956c7d316"
  instance_type = "t2.micro"
  key_name      = "my-key-pair"
  subnet_id     = aws_subnet.private_subnet.id

  security_groups = [aws_security_group.private_sg.name]
}
```
Run:
```bash
terraform init
terraform apply
```

---
